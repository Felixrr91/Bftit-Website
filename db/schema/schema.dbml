// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table player {
  id serial [primary key, not null]
  username varchar [not null]
  profile_image_url varchar
  created_at timestamp [not null]
}

Table match {
  id serial [primary key, not null]
  result_id integer
  challenger_id integer [not null]
  opponent_id integer
  created_at timestamp [not null]
}

Table match_result {
  id serial [primary key, not null]
  winner_id integer [not null]
  challenger_avatar varchar [not null]
  opponent_avatar varchar [not null]
  created_at timestamp [not null]
}

Table match_statistic {
  id serial [primary key, not null]
  player_id integer [not null]
  total_played integer
  total_won integer
  ranked_played integer
  ranked_won integer
}

Table bounty {
  id serial [primary key, not null]
  title varchar [not null]
  description varchar [not null]
  value integer [not null]
}

Table bounty_completion {
  id serial [primary key, not null]
  player_id integer [not null]
  match_result_id integer [not null]
  bounty_id integer [not null]
}

Table score {
  id serial [primary key, not null]
  player_id integer [not null]
  total_points integer
  bounty_points integer
  bounties_completed integer
}

Table avatar {
  id serial [primary key, not null]
  name varchar [not null]
}

Table avatar_statistic {
  id serial [primary key, not null]
  player_id integer [not null]
  avatar_id integer [not null]
  count integer
}

Ref: match.challenger_id > player.id // many-to-one
Ref: match.opponent_id > player.id // many-to-one

Ref: match_result.winner_id - player.id

Ref: match.result_id - match_result.id 

Ref: bounty_completion.player_id > player.id
Ref: bounty_completion.bounty_id > bounty.id
Ref: bounty_completion.match_result_id > match_result.id

Ref: score.player_id > player.id

Ref: match_statistic.player_id > player.id

Ref: avatar_statistic.avatar_id > avatar.id
Ref: avatar_statistic.player_id > player.id